//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Script/Input Actions/CameraEditorControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraEditorControl : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraEditorControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraEditorControl"",
    ""maps"": [
        {
            ""name"": ""DetectPoint"",
            ""id"": ""bc6118be-a639-49d7-8728-3b8c6a5b104a"",
            ""actions"": [
                {
                    ""name"": ""Click"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ae026dbb-dd3b-44a4-a610-25e3116263ac"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""afcf396d-1428-4b0e-8021-c37c9a069369"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Click"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // DetectPoint
        m_DetectPoint = asset.FindActionMap("DetectPoint", throwIfNotFound: true);
        m_DetectPoint_Click = m_DetectPoint.FindAction("Click", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // DetectPoint
    private readonly InputActionMap m_DetectPoint;
    private IDetectPointActions m_DetectPointActionsCallbackInterface;
    private readonly InputAction m_DetectPoint_Click;
    public struct DetectPointActions
    {
        private @CameraEditorControl m_Wrapper;
        public DetectPointActions(@CameraEditorControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Click => m_Wrapper.m_DetectPoint_Click;
        public InputActionMap Get() { return m_Wrapper.m_DetectPoint; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DetectPointActions set) { return set.Get(); }
        public void SetCallbacks(IDetectPointActions instance)
        {
            if (m_Wrapper.m_DetectPointActionsCallbackInterface != null)
            {
                @Click.started -= m_Wrapper.m_DetectPointActionsCallbackInterface.OnClick;
                @Click.performed -= m_Wrapper.m_DetectPointActionsCallbackInterface.OnClick;
                @Click.canceled -= m_Wrapper.m_DetectPointActionsCallbackInterface.OnClick;
            }
            m_Wrapper.m_DetectPointActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Click.started += instance.OnClick;
                @Click.performed += instance.OnClick;
                @Click.canceled += instance.OnClick;
            }
        }
    }
    public DetectPointActions @DetectPoint => new DetectPointActions(this);
    public interface IDetectPointActions
    {
        void OnClick(InputAction.CallbackContext context);
    }
}
